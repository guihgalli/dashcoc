@model List<Dashboard.Models.Usuario>
@{
    ViewData["Title"] = "Cadastro de Usuários";
}

@{
    // Adicionar token CSRF para operações AJAX
    var token = Html.AntiForgeryToken();
}
@Html.AntiForgeryToken()

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 mb-0">
                <i class="bi bi-people-fill me-2"></i>
                Cadastro de Usuários
            </h1>
            <p class="text-muted mb-0">Gerencie os usuários que têm acesso ao sistema</p>
        </div>
        <a href="@Url.Action("Create", "Usuario")" class="btn btn-primary">
            <i class="bi bi-plus-circle me-2"></i>
            Novo Usuário
        </a>
    </div>

    <div class="card">
        <div class="card-body">
            @if (Model.Any())
            {
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead class="table-light">
                            <tr>
                                <th>Nome</th>
                                <th>E-mail</th>
                                <th>Perfil de Acesso</th>
                                <th>Status</th>
                                <th>Data de Criação</th>
                                <th>Última Alteração</th>
                                <th width="150">Ações</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var usuario in Model)
                            {
                                <tr>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <div class="avatar-sm bg-primary text-white rounded-circle d-flex align-items-center justify-content-center me-3">
                                                <i class="bi bi-person-fill"></i>
                                            </div>
                                            <div>
                                                <strong>@usuario.Nome</strong>
                                                @if (usuario.Email == "admin@sistema.com")
                                                {
                                                    <span class="badge bg-warning text-dark ms-2">Admin</span>
                                                }
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <a href="mailto:@usuario.Email" class="text-decoration-none">
                                            <i class="bi bi-envelope me-1"></i>
                                            @usuario.Email
                                        </a>
                                    </td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(usuario.PerfilAcessoNome))
                                        {
                                            <span class="badge bg-info">
                                                <i class="bi bi-shield me-1"></i>
                                                @usuario.PerfilAcessoNome
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">
                                                <i class="bi bi-shield-x me-1"></i>
                                                Sem perfil
                                            </span>
                                        }
                                    </td>
                                    <td>
                                        @if (usuario.Ativo)
                                        {
                                            <span class="badge bg-success">
                                                <i class="bi bi-check-circle me-1"></i>
                                                Ativo
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-danger">
                                                <i class="bi bi-x-circle me-1"></i>
                                                Inativo
                                            </span>
                                        }
                                    </td>
                                    <td>
                                        <small class="text-muted">
                                            <i class="bi bi-calendar-plus me-1"></i>
                                            @usuario.DataCriacao.ToString("dd/MM/yyyy HH:mm")
                                        </small>
                                    </td>
                                    <td>
                                        <small class="text-muted">
                                            <i class="bi bi-calendar-check me-1"></i>
                                            @usuario.DataAlteracao.ToString("dd/MM/yyyy HH:mm")
                                        </small>
                                    </td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <a href="@Url.Action("Edit", "Usuario", new { id = usuario.Id })" 
                                               class="btn btn-sm btn-outline-primary" 
                                               title="Editar">
                                                <i class="bi bi-pencil"></i>
                                            </a>
                                            @if (usuario.Email != "admin@sistema.com")
                                            {
                                                <button type="button" 
                                                        class="btn btn-sm btn-outline-danger" 
                                                        onclick="excluirUsuario(@usuario.Id, '@usuario.Nome')"
                                                        title="Excluir">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <i class="bi bi-people display-1 text-muted"></i>
                    <h4 class="mt-3 text-muted">Nenhum usuário cadastrado</h4>
                    <p class="text-muted">Clique em "Novo Usuário" para começar a cadastrar usuários no sistema.</p>
                    <a href="@Url.Action("Create", "Usuario")" class="btn btn-primary">
                        <i class="bi bi-plus-circle me-2"></i>
                        Cadastrar Primeiro Usuário
                    </a>
                </div>
            }
        </div>
    </div>
</div>

<!-- Modal de confirmação de exclusão -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title text-danger" id="deleteModalLabel">
                    <i class="bi bi-exclamation-triangle me-2"></i>
                    Confirmar Exclusão
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fechar"></button>
            </div>
            <div class="modal-body text-center">
                <p class="mb-0" style="font-size:1.1em;">
                    Tem certeza que deseja excluir o usuário <strong id="usuarioNome"></strong>?
                </p>
                <p class="text-muted mt-2 mb-0">Esta ação não pode ser desfeita.</p>
            </div>
            <div class="modal-footer border-0 justify-content-center gap-2">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">
                    <i class="bi bi-trash me-2"></i>
                    Excluir
                </button>
            </div>
        </div>
    </div>
</div>

<script>
let usuarioIdParaExcluir = null;

function excluirUsuario(id, nome) {
    usuarioIdParaExcluir = id;
    document.getElementById('usuarioNome').textContent = nome;
    new bootstrap.Modal(document.getElementById('deleteModal')).show();
}

document.getElementById('confirmDeleteBtn').addEventListener('click', async function() {
    if (!usuarioIdParaExcluir) return;
    
    try {
        // Obter o token CSRF
        const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
        if (!tokenInput) {
            showMessage('error', 'Token de segurança não encontrado. Recarregue a página e tente novamente.', 8000);
            return;
        }
        
        const token = tokenInput.value;
        if (!token) {
            showMessage('error', 'Token de segurança inválido. Recarregue a página e tente novamente.', 8000);
            return;
        }
        
        const response = await fetch(`/Usuario/Delete/${usuarioIdParaExcluir}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': token
            }
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const result = await response.json();
        
        if (result.success) {
            // Fechar modal
            bootstrap.Modal.getInstance(document.getElementById('deleteModal')).hide();
            
            // Mostrar mensagem de sucesso
            showMessage('success', result.message, 5000);
            
            // Recarregar página após 1 segundo
            setTimeout(() => {
                window.location.reload();
            }, 1000);
        } else {
            showMessage('error', result.message, 8000);
        }
    } catch (error) {
        console.error('Erro na exclusão:', error);
        showMessage('error', 'Erro ao excluir usuário. Tente novamente.', 5000);
    }
});

// Função para mostrar mensagens (se não existir)
function showMessage(type, message, duration = 5000) {
    // Remover mensagens existentes
    const existingMessages = document.querySelectorAll('.message-container');
    existingMessages.forEach(msg => msg.remove());

    // Criar nova mensagem
    const messageDiv = document.createElement('div');
    messageDiv.className = `message-container message-${type}`;
    messageDiv.innerHTML = `
        <div class="message-content">
            <div class="message-icon">
                <i class="bi ${getMessageIcon(type)}"></i>
            </div>
            <div class="message-text">${message}</div>
            <button class="message-close" onclick="this.parentElement.parentElement.remove()">
                <i class="bi bi-x"></i>
            </button>
        </div>
    `;

    // Adicionar ao body
    document.body.appendChild(messageDiv);

    // Mostrar com animação
    setTimeout(() => {
        messageDiv.classList.add('message-show');
    }, 100);

    // Remover automaticamente
    if (duration > 0) {
        setTimeout(() => {
            messageDiv.classList.remove('message-show');
            messageDiv.classList.add('message-hide');
            setTimeout(() => {
                if (messageDiv.parentElement) {
                    messageDiv.remove();
                }
            }, 300);
        }, duration);
    }
}

function getMessageIcon(type) {
    switch (type) {
        case 'success': return 'bi-check-circle';
        case 'error': return 'bi-exclamation-circle';
        case 'warning': return 'bi-exclamation-triangle';
        case 'info': return 'bi-info-circle';
        default: return 'bi-info-circle';
    }
}
</script>

<style>
.avatar-sm {
    width: 32px;
    height: 32px;
    font-size: 14px;
}

.table th {
    font-weight: 600;
    color: #495057;
    border-bottom: 2px solid #dee2e6;
}

.table td {
    vertical-align: middle;
}

.btn-group .btn {
    border-radius: 0.375rem !important;
}

.btn-group .btn:first-child {
    border-top-right-radius: 0 !important;
    border-bottom-right-radius: 0 !important;
}

.btn-group .btn:last-child {
    border-top-left-radius: 0 !important;
    border-bottom-left-radius: 0 !important;
}

.card {
    border: none;
    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    border-radius: 0.5rem;
}
</style> 