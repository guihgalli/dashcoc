@{
    ViewData["Title"] = "Login";
    Layout = "_LoginLayout";
    var parametros = ViewBag.ParametrosSistema as Dashboard.Models.ParametroSistema;
    var siteKey = parametros?.ReCaptchaSiteKey ?? "";
    var recaptchaEnabled = parametros?.ReCaptchaEnabled ?? false;
}

@section Styles {
    <style>
        body {
            background: url('https://d2nytdlptrqhdi.cloudfront.net/wp-content/uploads/2025/03/18154805/BG-textura-senior-H-1.jpg') no-repeat center center fixed;
            background-size: cover;
        }
    </style>
}

<div class="login-header">
    <h1>@(!string.IsNullOrEmpty(parametros?.DescricaoCabecalhoLogin) ? parametros.DescricaoCabecalhoLogin : "Senior - COC - Diario de Bordo")</h1>
    <p>Faça login para acessar o sistema</p>
</div>

<form asp-action="Index" method="post" class="login-form" id="loginForm" autocomplete="off">
    @Html.AntiForgeryToken()
    <input type="hidden" id="g_recaptcha_response" name="g_recaptcha_response" />
    @if (ViewBag.Error != null)
    {
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                showMessage('error', '@ViewBag.Error', 8000);
            });
        </script>
    }
    
    <div class="form-group">
        <label for="login_user_x">
            <i class="bi bi-envelope me-1"></i>
            E-mail
        </label>
        <input type="email" id="login_user_x" name="login_user_x" placeholder="Digite seu e-mail" required autocomplete="off" />
        <div class="invalid-feedback">Por favor, informe um e-mail válido.</div>
    </div>
    
    <div class="form-group">
        <label for="i_x2">
            <i class="bi bi-lock me-1"></i>
            Senha
        </label>
        <input type="password" id="i_x2" placeholder="Digite sua senha" required autocomplete="off" />
        <input type="hidden" id="i_x2_encoded" name="i_x2" />
        <div class="invalid-feedback">Por favor, informe sua senha.</div>
    </div>
    
    <div class="form-check">
        <input class="form-check-input" type="checkbox" id="salvarCredenciais">
        <label class="form-check-label" for="salvarCredenciais">
            Salvar as credenciais
        </label>
    </div>
    
    <button type="submit" class="login-btn" id="loginBtn">
        <span class="btn-text">
            <i class="bi bi-box-arrow-in-right me-2"></i>
            Entrar
        </span>
        <span class="btn-loading d-none">
            <i class="bi bi-arrow-clockwise me-2"></i>
            Entrando...
        </span>
    </button>
    
    <div class="login-links">
        <a href="#" class="forgot-password" onclick="esqueciSenha()">
            <i class="bi bi-question-circle me-1"></i>
            Esqueci minha senha?
        </a>
        <a href="#" class="create-account" onclick="criarConta()">
            <i class="bi bi-person-plus me-1"></i>
            Criar conta de acesso
        </a>
    </div>
    <script>
        (function(){
            var u = document.getElementById('login_user_x');
            var p = document.getElementById('i_x2');
            var pHidden = document.getElementById('i_x2_encoded');
            if(u) u.setAttribute('autocomplete','off');
            if(p) p.setAttribute('autocomplete','off');
            // Ofuscação Base64 para o valor da senha
            if(p && pHidden) {
                p.addEventListener('input', function() {
                    this.setAttribute('data-value', btoa(this.value));
                    // Atualizar o campo hidden em tempo real
                    pHidden.value = btoa(this.value);
                });
            }
        })();
    </script>
</form>

<!-- Área para alertas -->
<div id="alertArea"></div>

<!-- Modal Esqueci Minha Senha -->
<div id="forgotPasswordModal" class="modal-overlay">
    <div class="modal-content">
        <div class="modal-header">
            <h3>Esqueci minha senha</h3>
            <button type="button" class="modal-close" onclick="fecharModal()">
                <i class="bi bi-x"></i>
            </button>
        </div>
        <form id="forgotPasswordForm" class="modal-form">
            <div class="form-group">
                <label for="resetEmail">
                    <i class="bi bi-envelope me-1"></i>
                    E-mail
                </label>
                <input type="email" id="resetEmail" name="email" placeholder="Digite seu e-mail" required />
                <div class="invalid-feedback">Por favor, informe um e-mail válido.</div>
            </div>
            
            <button type="submit" class="login-btn" id="sendResetBtn">
                <span class="btn-text">
                    <i class="bi bi-send me-2"></i>
                    Enviar link de redefinição
                </span>
                <span class="btn-loading d-none">
                    <i class="bi bi-arrow-clockwise me-2"></i>
                    Enviando...
                </span>
            </button>
            
            <div class="modal-actions">
                <button type="button" class="btn-cancel" onclick="fecharModal()">
                    <i class="bi bi-x-circle me-2"></i>
                    Cancelar
                </button>
            </div>
        </form>
    </div>
</div>

<script src="~/js/login.js"></script> 

<!-- PROTEÇÃO CONTRA DEVTOOLS - APENAS NA TELA DE LOGIN -->
<script>
(function() {
    'use strict';
    
    // Variáveis para controle da proteção
    let devToolsDetected = false;
    let devToolsCheckInterval;
    let lastWindowSize = { width: window.innerWidth, height: window.innerHeight };
    
    // Função para detectar se DevTools está aberto
    function detectDevTools() {
        // Método 1: Verificar mudança no tamanho da janela
        const currentSize = { width: window.innerWidth, height: window.innerHeight };
        const sizeDiff = Math.abs(currentSize.width - lastWindowSize.width) + 
                        Math.abs(currentSize.height - lastWindowSize.height);
        
        // Método 2: Verificar se console está aberto (Firefox)
        const consoleOpen = window.console && (window.console.firebug || window.console.exception);
        
        // Método 3: Verificar se debugger está ativo
        const debuggerActive = window.outerHeight - window.innerHeight > 200 || 
                              window.outerWidth - window.innerWidth > 200;
        
        // Método 4: Verificar se elementos de DevTools estão presentes
        const devToolsElements = document.querySelectorAll('*[class*="devtools"], *[id*="devtools"]');
        
        if (sizeDiff > 50 || consoleOpen || debuggerActive || devToolsElements.length > 0) {
            return true;
        }
        
        lastWindowSize = currentSize;
        return false;
    }
    
    // Função para bloquear ações do usuário
    function blockUserActions() {
        if (devToolsDetected) return;
        
        devToolsDetected = true;
        
        // Limpar a tela
        document.body.innerHTML = `
            <div style="
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                display: flex;
                align-items: center;
                justify-content: center;
                z-index: 999999;
                font-family: Arial, sans-serif;
                color: white;
                text-align: center;
            ">
                <div>
                    <h1 style="font-size: 2.5em; margin-bottom: 20px;">⚠️ Acesso Negado</h1>
                    <p style="font-size: 1.2em; margin-bottom: 30px;">
                        O uso de ferramentas de desenvolvedor não é permitido nesta página.
                    </p>
                    <p style="font-size: 1em; opacity: 0.8;">
                        Feche as ferramentas de desenvolvedor e recarregue a página para continuar.
                    </p>
                    <button onclick="location.reload()" style="
                        margin-top: 30px;
                        padding: 12px 24px;
                        background: rgba(255,255,255,0.2);
                        border: 2px solid white;
                        color: white;
                        border-radius: 5px;
                        cursor: pointer;
                        font-size: 1em;
                        transition: all 0.3s ease;
                    " onmouseover="this.style.background='rgba(255,255,255,0.3)'" 
                       onmouseout="this.style.background='rgba(255,255,255,0.2)'">
                        Recarregar Página
                    </button>
                </div>
            </div>
        `;
        
        // Parar verificação periódica
        if (devToolsCheckInterval) {
            clearInterval(devToolsCheckInterval);
        }
    }
    
    // Função para verificar periodicamente se DevTools está aberto
    function startDevToolsMonitoring() {
        devToolsCheckInterval = setInterval(() => {
            if (detectDevTools()) {
                blockUserActions();
            }
        }, 1000); // Verificar a cada segundo
    }
    
    // Bloquear clique com botão direito
    document.addEventListener('contextmenu', function(e) {
        e.preventDefault();
        e.stopPropagation();
        return false;
    });
    
    // Bloquear atalhos de teclado
    document.addEventListener('keydown', function(e) {
        // F12
        if (e.key === 'F12') {
            e.preventDefault();
            e.stopPropagation();
            return false;
        }
        
        // Ctrl+Shift+I (Chrome DevTools)
        if (e.ctrlKey && e.shiftKey && e.key === 'I') {
            e.preventDefault();
            e.stopPropagation();
            return false;
        }
        
        // Ctrl+Shift+J (Chrome Console)
        if (e.ctrlKey && e.shiftKey && e.key === 'J') {
            e.preventDefault();
            e.stopPropagation();
            return false;
        }
        
        // Ctrl+U (Ver código fonte)
        if (e.ctrlKey && e.key === 'u') {
            e.preventDefault();
            e.stopPropagation();
            return false;
        }
        
        // Ctrl+Shift+C (Chrome Elements)
        if (e.ctrlKey && e.shiftKey && e.key === 'C') {
            e.preventDefault();
            e.stopPropagation();
            return false;
        }
        
        // Ctrl+Shift+M (Chrome Device Mode)
        if (e.ctrlKey && e.shiftKey && e.key === 'M') {
            e.preventDefault();
            e.stopPropagation();
            return false;
        }
        
        // Ctrl+Shift+E (Firefox Network)
        if (e.ctrlKey && e.shiftKey && e.key === 'E') {
            e.preventDefault();
            e.stopPropagation();
            return false;
        }
        
        // Ctrl+Shift+K (Firefox Console)
        if (e.ctrlKey && e.shiftKey && e.key === 'K') {
            e.preventDefault();
            e.stopPropagation();
            return false;
        }
    });
    
    // Bloquear atalhos de teclado no nível da janela
    window.addEventListener('keydown', function(e) {
        // F12
        if (e.key === 'F12') {
            e.preventDefault();
            e.stopPropagation();
            return false;
        }
        
        // Ctrl+Shift+I
        if (e.ctrlKey && e.shiftKey && e.key === 'I') {
            e.preventDefault();
            e.stopPropagation();
            return false;
        }
        
        // Ctrl+Shift+J
        if (e.ctrlKey && e.shiftKey && e.key === 'J') {
            e.preventDefault();
            e.stopPropagation();
            return false;
        }
        
        // Ctrl+U
        if (e.ctrlKey && e.key === 'u') {
            e.preventDefault();
            e.stopPropagation();
            return false;
        }
    });
    
    // Iniciar monitoramento quando o DOM estiver carregado
    document.addEventListener('DOMContentLoaded', function() {
        // Aguardar um pouco para garantir que tudo esteja carregado
        setTimeout(() => {
            startDevToolsMonitoring();
        }, 2000);
    });
    
    // Verificação inicial
    setTimeout(() => {
        if (detectDevTools()) {
            blockUserActions();
        }
    }, 1000);
    
    // Proteção adicional: detectar mudanças na janela
    window.addEventListener('resize', function() {
        setTimeout(() => {
            if (detectDevTools()) {
                blockUserActions();
            }
        }, 100);
    });
    
    // Proteção contra console.log
    const originalConsoleLog = console.log;
    console.log = function() {
        // Permitir apenas logs específicos do sistema
        const args = Array.prototype.slice.call(arguments);
        const message = args.join(' ');
        
        // Permitir logs que contêm palavras-chave específicas do sistema
        if (message.includes('[DEBUG]') || 
            message.includes('login.js') || 
            message.includes('recaptcha') ||
            message.includes('DOM carregado') ||
            message.includes('Checkbox encontrado')) {
            originalConsoleLog.apply(console, arguments);
        }
        // Bloquear outros logs
    };
    
    // Proteção contra console.error (permitir apenas erros do sistema)
    const originalConsoleError = console.error;
    console.error = function() {
        const args = Array.prototype.slice.call(arguments);
        const message = args.join(' ');
        
        // Permitir apenas erros específicos do sistema
        if (message.includes('localStorage') || 
            message.includes('Checkbox não encontrado') ||
            message.includes('Campo') ||
            message.includes('reCAPTCHA')) {
            originalConsoleError.apply(console, arguments);
        }
        // Bloquear outros erros
    };
    
})();
</script>

@if (recaptchaEnabled)
{
    <script src="https://www.google.com/recaptcha/api.js?render=@siteKey"></script>
    <script>
        window.recaptchaSiteKey = '@siteKey';
        window.recaptchaEnabled = true;
    </script>
}
else
{
    <script>window.recaptchaEnabled = false;</script>
} 