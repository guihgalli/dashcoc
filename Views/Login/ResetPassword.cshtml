@{
    ViewData["Title"] = "Redefinir Senha";
    Layout = "_LoginLayout";
    var parametros = ViewBag.ParametrosSistema as Dashboard.Models.ParametroSistema;
}

@section Styles {
    <style>
        body {
            background: @(string.IsNullOrEmpty(parametros?.CorFundoLogin) ? "linear-gradient(135deg, #667eea 0%, #764ba2 100%)" : parametros.CorFundoLogin) !important;
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif !important;
        }
    </style>
}

<div class="login-header">
    <h1>Sistema DorowCamp</h1>
    <p>Redefina sua senha</p>
</div>

@if (ViewBag.Error != null)
{
    <div class="alert alert-danger" role="alert">
        <i class="bi bi-exclamation-triangle me-2"></i>
        @ViewBag.Error
    </div>
}

<form id="resetPasswordForm" class="login-form">
    <input type="hidden" id="token" value="@ViewBag.Token" />
    
    <div class="form-group">
        <label for="newPassword">
            <i class="bi bi-lock me-1"></i>
            Nova Senha
        </label>
        <div class="input-group">
            <input type="password" id="newPassword" name="newPassword" placeholder="Digite sua nova senha" required minlength="6" />
            <button class="btn btn-outline-secondary" type="button" id="toggleNewPassword">
                <i class="bi bi-eye" id="toggleNewPasswordIcon"></i>
            </button>
        </div>
        <div class="invalid-feedback">Por favor, informe uma senha com pelo menos 6 caracteres.</div>
        <div class="form-text">
            <i class="bi bi-shield-check me-1"></i>
            Mínimo 6 caracteres
        </div>
    </div>
    
    <div class="form-group">
        <label for="confirmPassword">
            <i class="bi bi-lock-fill me-1"></i>
            Confirmar Nova Senha
        </label>
        <div class="input-group">
            <input type="password" id="confirmPassword" name="confirmPassword" placeholder="Confirme sua nova senha" required minlength="6" />
            <button class="btn btn-outline-secondary" type="button" id="toggleConfirmPassword">
                <i class="bi bi-eye" id="toggleConfirmPasswordIcon"></i>
            </button>
        </div>
        <div class="invalid-feedback">As senhas não coincidem.</div>
    </div>
    
    <button type="submit" class="login-btn" id="resetBtn">
        <span class="btn-text">
            <i class="bi bi-check-circle me-2"></i>
            Alterar Senha
        </span>
        <span class="btn-loading d-none">
            <i class="bi bi-arrow-clockwise me-2"></i>
            Alterando...
        </span>
    </button>
    
    <div class="login-links">
        <a href="/Login" class="back-to-login">
            <i class="bi bi-arrow-left me-1"></i>
            Voltar para o Login
        </a>
    </div>
</form>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('resetPasswordForm');
    const newPasswordInput = document.getElementById('newPassword');
    const confirmPasswordInput = document.getElementById('confirmPassword');
    const resetBtn = document.getElementById('resetBtn');
    const token = document.getElementById('token').value;
    
    // Elementos para toggle de senha
    const toggleNewPasswordBtn = document.getElementById('toggleNewPassword');
    const toggleConfirmPasswordBtn = document.getElementById('toggleConfirmPassword');
    const toggleNewPasswordIcon = document.getElementById('toggleNewPasswordIcon');
    const toggleConfirmPasswordIcon = document.getElementById('toggleConfirmPasswordIcon');

    // Toggle de visibilidade da nova senha
    toggleNewPasswordBtn.addEventListener('click', function() {
        if (newPasswordInput.type === 'password') {
            newPasswordInput.type = 'text';
            toggleNewPasswordIcon.classList.remove('bi-eye');
            toggleNewPasswordIcon.classList.add('bi-eye-slash');
        } else {
            newPasswordInput.type = 'password';
            toggleNewPasswordIcon.classList.remove('bi-eye-slash');
            toggleNewPasswordIcon.classList.add('bi-eye');
        }
    });

    // Toggle de visibilidade da confirmação de senha
    toggleConfirmPasswordBtn.addEventListener('click', function() {
        if (confirmPasswordInput.type === 'password') {
            confirmPasswordInput.type = 'text';
            toggleConfirmPasswordIcon.classList.remove('bi-eye');
            toggleConfirmPasswordIcon.classList.add('bi-eye-slash');
        } else {
            confirmPasswordInput.type = 'password';
            toggleConfirmPasswordIcon.classList.remove('bi-eye-slash');
            toggleConfirmPasswordIcon.classList.add('bi-eye');
        }
    });

    // Validação em tempo real
    function validatePasswords() {
        const newPassword = newPasswordInput.value;
        const confirmPassword = confirmPasswordInput.value;
        
        // Validação da nova senha
        if (newPassword.length > 0 && newPassword.length < 6) {
            newPasswordInput.classList.add('is-invalid');
            newPasswordInput.classList.remove('is-valid');
        } else if (newPassword.length >= 6) {
            newPasswordInput.classList.remove('is-invalid');
            newPasswordInput.classList.add('is-valid');
        } else {
            newPasswordInput.classList.remove('is-invalid', 'is-valid');
        }
        
        // Validação da confirmação de senha
        if (confirmPassword.length > 0 && newPassword !== confirmPassword) {
            confirmPasswordInput.classList.add('is-invalid');
            confirmPasswordInput.classList.remove('is-valid');
        } else if (confirmPassword.length > 0 && newPassword === confirmPassword) {
            confirmPasswordInput.classList.remove('is-invalid');
            confirmPasswordInput.classList.add('is-valid');
        } else {
            confirmPasswordInput.classList.remove('is-invalid', 'is-valid');
        }
    }

    newPasswordInput.addEventListener('input', validatePasswords);
    confirmPasswordInput.addEventListener('input', validatePasswords);

    form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const newPassword = newPasswordInput.value;
        const confirmPassword = confirmPasswordInput.value;
        
        // Validações
        if (newPassword.length < 6) {
            showMessage('error', 'A senha deve ter pelo menos 6 caracteres.', 5000);
            newPasswordInput.focus();
            return;
        }
        
        if (newPassword !== confirmPassword) {
            showMessage('error', 'As senhas não coincidem.', 5000);
            confirmPasswordInput.focus();
            return;
        }
        
        if (!token) {
            showMessage('error', 'Token inválido. Solicite uma nova redefinição de senha.', 8000);
            return;
        }
        
        // Mostrar loading
        resetBtn.classList.add('loading');
        resetBtn.disabled = true;
        
        try {
            const response = await fetch('/Login/ResetPassword', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    token: token,
                    newPassword: newPassword,
                    confirmPassword: confirmPassword
                })
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const result = await response.json();
            
            if (result.success) {
                showMessage('success', result.message, 8000);
                // Limpar formulário
                form.reset();
                newPasswordInput.classList.remove('is-valid');
                confirmPasswordInput.classList.remove('is-valid');
                
                // Redirecionar para login após 3 segundos
                setTimeout(() => {
                    window.location.href = '/Login';
                }, 3000);
            } else {
                showMessage('error', result.message, 8000);
            }
        } catch (error) {
            console.error('Erro na redefinição:', error);
            showMessage('error', 'Erro ao processar solicitação. Tente novamente.', 5000);
        } finally {
            // Remover loading
            resetBtn.classList.remove('loading');
            resetBtn.disabled = false;
        }
    });
});
</script>

<script src="~/js/login.js"></script>

<style>
.alert {
    border-radius: 0.5rem;
    margin-bottom: 1.5rem;
}

.alert-danger {
    background-color: #f8d7da;
    border-color: #f5c6cb;
    color: #721c24;
}

.input-group .btn {
    border-color: #ced4da;
    background-color: #f8f9fa;
}

.input-group .btn:hover {
    background-color: #e9ecef;
    border-color: #adb5bd;
}

.form-text {
    font-size: 0.875em;
    color: #6c757d;
    margin-top: 0.25rem;
}

.login-form .form-group {
    margin-bottom: 1.5rem;
}

.login-form .form-control:focus {
    border-color: #0d6efd;
    box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
}

.login-form .form-control.is-valid {
    border-color: #198754;
    box-shadow: 0 0 0 0.25rem rgba(25, 135, 84, 0.25);
}

.login-form .form-control.is-invalid {
    border-color: #dc3545;
    box-shadow: 0 0 0 0.25rem rgba(220, 53, 69, 0.25);
}

.login-links {
    margin-top: 1.5rem;
    text-align: center;
}

.back-to-login {
    color: #6c757d;
    text-decoration: none;
    font-size: 0.9em;
}

.back-to-login:hover {
    color: #495057;
    text-decoration: underline;
}
</style> 